{
  "version": 3,
  "sources": ["../../node_modules/react-dice-roll/src/_utils.ts", "../../node_modules/react-dice-roll/src/index.tsx"],
  "sourcesContent": ["import { ReactChild } from 'react';\nimport { TValueClassMap, TFaceTransformMap, TDefaultFaceGrid } from './_types';\n\nexport const valueClassMap: TValueClassMap = {\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6: 'six',\n};\n\nexport const faceTransformMap: TFaceTransformMap = {\n    1: (translate: number) => ({ transform: `rotateX(-90deg) translate3d(0, 0, ${translate}px)` }),\n    2: (translate: number) => ({ transform: `translate3d(0, 0, ${translate}px)` }),\n    3: (translate: number) => ({ transform: `rotateY(180deg) translate3d(0, 0, ${translate}px)` }),\n    4: (translate: number) => ({ left: '50%', marginLeft: `-${translate}px`, transform: `rotateY(-90deg) translate3d(0, 0, ${translate}px)` }),\n    5: (translate: number) => ({ left: '50%', marginLeft: `-${translate}px`, transform: `rotateY(90deg) translate3d(0, 0, ${translate}px)` }),\n    6: (translate: number) => ({ transform: `rotateX(90deg) translate3d(0, 0, ${translate}px)` }),\n};\n\nexport const defaultFaceGrid: TDefaultFaceGrid = {\n    1: [12],\n    2: [11, 13],\n    3: [6, 12, 18],\n    4: [6, 8, 16, 18],\n    5: [6, 8, 12, 16, 18],\n    6: [6, 8, 11, 13, 16, 18]\n};\n\nexport const faceClasses = [\n    '_3dface _3dface--one',\n    '_3dface _3dface--two',\n    '_3dface _3dface--three',\n    '_3dface _3dface--four',\n    '_3dface _3dface--five',\n    '_3dface _3dface--six'\n];\n\nexport const times = (counter: number, callback: (index: number) => ReactChild) => {\n    const data = [];\n    for(let i = 0; i < counter; i++) {\n        data.push(callback(i));\n    }\n\n    return data;\n}", "import * as React from 'react';\nimport './styles.scss';\nimport { TProps, TSingleFace, TValue } from './_types';\nimport { defaultFaceGrid, faceClasses, faceTransformMap, times, valueClassMap } from './_utils';\n\nconst { useState, useEffect, forwardRef, useImperativeHandle } = React;\n\nconst getFaceArray = (size: number, faces: string[], faceBg?: string): TSingleFace[] => {\n    return faceClasses.map((className: string, index: number) => ({\n        className,\n        children: !faces[index] ? (\n            <div className={`defaultFace ${valueClassMap[(index + 1) as TValue]}`}>\n                {times(25, (idx) => (\n                    <div key={idx}>\n                        {defaultFaceGrid[(index + 1) as TValue].includes(idx) && <span />}\n                    </div>\n                ))}\n            </div>\n        ) : null,\n        style: {\n            ...faceTransformMap[(index + 1) as TValue](size / 2),\n            width: size + 'px',\n            height: size + 'px',\n            ...(faceBg && { backgroundColor: faceBg }),\n            ...(faces[index] && { backgroundImage: `url(${faces[index]})` }),\n        },\n    }));\n};\n\ntype TDiceRef = {\n    rollDice: (value: TValue) => void;\n};\n\nconst Dice = forwardRef((props: TProps, ref: React.MutableRefObject<TDiceRef>) => {\n    const { rollingTime = 1000, onRoll, defaultValue = 6, size = 250, faceBg, faces = [], disabled, cheatValue, placement, sound, triggers = ['click'], ...rest } = props;\n    const [value, setValue] = useState<TValue>(defaultValue);\n    const [rolling, setRolling] = useState(false);\n    const [faceArray, setFaceArray] = useState<TSingleFace[]>([]);\n    const [placementStyles, setPlacementStyles] = useState<React.CSSProperties>({});\n    const [buttonStyles, setButtonStyles] = useState<React.CSSProperties>({});\n\n    const handleDiceRoll = (value?: TValue) => {\n        let diceAudio: HTMLAudioElement;\n        if (sound) {\n            diceAudio = new Audio(sound);\n            diceAudio.play();\n        }\n        setRolling(true);\n        setTimeout(() => {\n            let rollValue = Math.floor((Math.random() * 6) + 1) as TValue;\n\n            if (value) rollValue = value;\n            if (cheatValue) rollValue = cheatValue;\n            \n            setRolling(false);\n            setValue(rollValue);\n            \n            if (diceAudio) diceAudio.pause();\n            if (!onRoll) return;\n            onRoll(rollValue);\n        }, rollingTime);\n    };\n\n    useImperativeHandle(ref, () => ({ rollDice: handleDiceRoll }));\n\n    const keyPressHandler = (event: KeyboardEvent) => {\n        if (!triggers?.length || !triggers.includes(event.key)) {\n            return;\n        }\n\n        handleDiceRoll();\n    };\n\n    const clickHandler = () => {\n        if (!triggers?.length || !triggers.includes('click')) {\n            return;\n        }\n\n        handleDiceRoll();\n    };\n\n    useEffect(() => {\n        if (typeof window === 'undefined' || !triggers?.length) {\n            return;\n        }\n        window.addEventListener('keypress', keyPressHandler);\n        // Remove event listeners on cleanup\n        return () => {\n          window.removeEventListener('keypress', keyPressHandler);\n        };\n    }, [triggers]);\n    \n    useEffect(() => {\n        setFaceArray(getFaceArray(size, faces, faceBg));\n    }, [size, faces.length, faceBg]);\n\n    useEffect(() => {\n        const positionStyles = placement?.split('-')?.reduce((acc, curr) => {\n            return { ...acc, [curr]: ['left', 'right'].includes(curr) ? 0 : `-${size}px` };\n        }, {}) as React.CSSProperties;\n        setPlacementStyles(positionStyles);\n    }, [placement, size]);\n\n    useEffect(() => {\n        setButtonStyles({\n            ...rest,\n            ...placementStyles,\n            width: size + 'px',\n            height: size + 'px',\n            filter: disabled ? 'grayscale(100%)' : 'unset' \n        });\n    }, [placementStyles, size, disabled]);\n\n    if (!faceArray?.length) return null;\n\n    return (\n        <button disabled={disabled || rolling} onClick={clickHandler} style={buttonStyles} className={`_space3d ${valueClassMap[value]} ${rolling && 'rolling'}`}>\n            <div className=\"_3dbox\">\n                <div {...faceArray[0]} />\n                <div {...faceArray[1]} />\n                <div {...faceArray[2]} />\n                <div {...faceArray[3]} />\n                <div {...faceArray[4]} />\n                <div {...faceArray[5]} />\n            </div>\n        </button>\n    )\n});\n\nexport default Dice;"],
  "mappings": "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",
  "names": ["valueClassMap", "faceTransformMap", "translate", "transform", "left", "marginLeft", "defaultFaceGrid", "faceClasses", "times", "counter", "callback", "data", "i", "push", "useState", "React", "useEffect", "forwardRef", "useImperativeHandle", "Dice", "props", "ref", "_a", "rollingTime", "u", "onRoll", "_b", "defaultValue", "_c", "size", "faceBg", "_d", "faces", "disabled", "cheatValue", "placement", "sound", "_e", "triggers", "rest", "_f", "value", "setValue", "_g", "rolling", "setRolling", "_h", "faceArray", "setFaceArray", "_j", "placementStyles", "setPlacementStyles", "_k", "buttonStyles", "setButtonStyles", "handleDiceRoll", "diceAudio", "Audio", "play", "setTimeout", "rollValue", "Math", "floor", "random", "pause", "rollDice", "keyPressHandler", "event", "length", "includes", "key", "window", "addEventListener", "removeEventListener", "map", "className", "index", "children", "idx", "style", "width", "height", "backgroundColor", "backgroundImage", "e", "positionStyles", "split", "reduce", "acc", "curr", "filter", "onClick"]
}
